[{"/home/ainesh/2-2/dass/2019101067/frontend/src/index.js":"1","/home/ainesh/2-2/dass/2019101067/frontend/src/serviceWorker.js":"2","/home/ainesh/2-2/dass/2019101067/frontend/src/App.js":"3","/home/ainesh/2-2/dass/2019101067/frontend/src/components/templates/Navbar.js":"4","/home/ainesh/2-2/dass/2019101067/frontend/src/components/Common/Home.js":"5","/home/ainesh/2-2/dass/2019101067/frontend/src/components/Users/UsersList.js":"6","/home/ainesh/2-2/dass/2019101067/frontend/src/components/Common/Register.js":"7","/home/ainesh/2-2/dass/2019101067/frontend/src/components/Common/Login.js":"8","/home/ainesh/2-2/dass/2019101067/frontend/src/components/Recruiter/RecruiterProfile.js":"9","/home/ainesh/2-2/dass/2019101067/frontend/src/components/Applicant/ApplicantProfile.js":"10","/home/ainesh/2-2/dass/2019101067/frontend/src/components/Applicant/JobListings.js":"11","/home/ainesh/2-2/dass/2019101067/frontend/src/components/Recruiter/CreateJobs.js":"12","/home/ainesh/2-2/dass/2019101067/frontend/src/components/Recruiter/EditJobs.js":"13","/home/ainesh/2-2/dass/2019101067/frontend/src/components/Recruiter/EditJobVals.js":"14","/home/ainesh/2-2/dass/2019101067/frontend/src/components/Applicant/Applications.js":"15","/home/ainesh/2-2/dass/2019101067/frontend/src/components/Recruiter/ManageApplications.js":"16"},{"size":452,"mtime":1610220698000,"results":"17","hashOfConfig":"18"},{"size":5003,"mtime":1610220698000,"results":"19","hashOfConfig":"18"},{"size":1968,"mtime":1611670941576,"results":"20","hashOfConfig":"18"},{"size":3445,"mtime":1611595675062,"results":"21","hashOfConfig":"18"},{"size":397,"mtime":1610623641871,"results":"22","hashOfConfig":"18"},{"size":6385,"mtime":1610481944633,"results":"23","hashOfConfig":"18"},{"size":3172,"mtime":1611652037353,"results":"24","hashOfConfig":"18"},{"size":2986,"mtime":1611652045077,"results":"25","hashOfConfig":"18"},{"size":4619,"mtime":1611664360389,"results":"26","hashOfConfig":"18"},{"size":4913,"mtime":1611665477097,"results":"27","hashOfConfig":"18"},{"size":7366,"mtime":1611666897029,"results":"28","hashOfConfig":"18"},{"size":6140,"mtime":1611609434819,"results":"29","hashOfConfig":"18"},{"size":6625,"mtime":1611670653066,"results":"30","hashOfConfig":"18"},{"size":2769,"mtime":1611651555991,"results":"31","hashOfConfig":"18"},{"size":2342,"mtime":1611676296960,"results":"32","hashOfConfig":"18"},{"size":7183,"mtime":1611679465497,"results":"33","hashOfConfig":"18"},{"filePath":"34","messages":"35","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"36"},"1r822os",{"filePath":"37","messages":"38","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"36"},{"filePath":"39","messages":"40","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"41","usedDeprecatedRules":"36"},{"filePath":"42","messages":"43","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"44","usedDeprecatedRules":"36"},{"filePath":"45","messages":"46","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"47","usedDeprecatedRules":"36"},{"filePath":"48","messages":"49","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"50","usedDeprecatedRules":"36"},{"filePath":"51","messages":"52","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"53","usedDeprecatedRules":"36"},{"filePath":"54","messages":"55","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"56","usedDeprecatedRules":"36"},{"filePath":"57","messages":"58","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"59","usedDeprecatedRules":"36"},{"filePath":"60","messages":"61","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"62","usedDeprecatedRules":"36"},{"filePath":"63","messages":"64","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"65","usedDeprecatedRules":"36"},{"filePath":"66","messages":"67","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"68","usedDeprecatedRules":"36"},{"filePath":"69","messages":"70","errorCount":0,"warningCount":10,"fixableErrorCount":0,"fixableWarningCount":0,"source":"71","usedDeprecatedRules":"72"},{"filePath":"73","messages":"74","errorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"75","usedDeprecatedRules":"36"},{"filePath":"76","messages":"77","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"78","usedDeprecatedRules":"36"},{"filePath":"79","messages":"80","errorCount":0,"warningCount":10,"fixableErrorCount":0,"fixableWarningCount":0,"source":"81","usedDeprecatedRules":"36"},"/home/ainesh/2-2/dass/2019101067/frontend/src/index.js",[],["82","83"],"/home/ainesh/2-2/dass/2019101067/frontend/src/serviceWorker.js",[],"/home/ainesh/2-2/dass/2019101067/frontend/src/App.js",["84"],"import React from 'react';\nimport { BrowserRouter as Router, Route, Link } from \"react-router-dom\";\nimport \"bootstrap/dist/css/bootstrap.min.css\"\n\nimport UsersList from './components/Users/UsersList'\nimport Home from './components/Common/Home'\nimport Register from './components/Common/Register'\nimport Navbar from './components/templates/Navbar'\nimport ApplicantProfile from './components/Applicant/ApplicantProfile'\nimport RecruiterProfile from './components/Recruiter/RecruiterProfile'\nimport Login from './components/Common/Login'\nimport Jobs from './components/Recruiter/CreateJobs'\nimport JobListings from './components/Applicant/JobListings'\nimport EditJobs from './components/Recruiter/EditJobs'\nimport EditJobVals from './components/Recruiter/EditJobVals'\nimport Applications from './components/Applicant/Applications'\nimport ManageApplications from './components/Recruiter/ManageApplications'\n\n\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      loggedin: false,\n    }\n  }\n  render() {\n    return (\n      <Router>\n        <div className=\"container\">\n          <Navbar />\n          <br />\n          <Route path=\"/\" exact component={Home} />\n          <Route path=\"/users\" exact component={UsersList} />\n          <Route path=\"/register\" component={Register} />\n          <Route path=\"/applicantprofile\" component={ApplicantProfile} />\n          <Route path=\"/recruiterprofile\" component={RecruiterProfile} />\n          <Route path=\"/login\" component={Login} />\n          <Route path=\"/jobs\" component={Jobs} />\n          <Route path=\"/joblistings\" component={JobListings} />\n          <Route path=\"/editjobs\" component={EditJobs} />\n          <Route path=\"/editjobvals\" component={EditJobVals} />\n          <Route path=\"/applications\" component={Applications} />\n          <Route path=\"/manageapplications\" component={ManageApplications} />\n        </div>\n      </Router>\n    );\n  }\n}\n\nexport default App;\n","/home/ainesh/2-2/dass/2019101067/frontend/src/components/templates/Navbar.js",["85","86","87","88"],"import React, { Component } from 'react';\r\nimport { BrowserRouter as Router, Route, Link } from \"react-router-dom\";\r\nimport \"bootstrap/dist/css/bootstrap.min.css\"\r\n\r\nexport default class NavBar extends Component {\r\n\r\n    constructor(props) {\r\n        super(props);\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div>\r\n                <nav className=\"navbar navbar-expand-lg navbar-light bg-light\">\r\n                    <Link to=\"/\" className=\"navbar-brand\">Demo</Link>\r\n                    <div className=\"collapse navbar-collapse\">\r\n                        <ul className=\"navbar-nav mr-auto\">\r\n                            {\r\n                                localStorage.getItem(\"usertype\") ? (\r\n                                    <>\r\n                                        {localStorage.getItem(\"usertype\") == \"applicant\" ? (\r\n                                            <>\r\n                                                <li className=\"navbar-item\">\r\n                                                    <Link to=\"/applicantprofile\" className=\"nav-link\">Profile</Link>\r\n                                                </li>\r\n                                                <li className=\"navbar-item\">\r\n                                                    <Link to=\"/joblistings\" className=\"nav-link\">Jobs</Link>\r\n                                                </li>\r\n                                            </>\r\n                                        ) : (\r\n                                                <>\r\n                                                    <li className=\"navbar-item\">\r\n                                                        <Link to=\"/recruiterprofile\" className=\"nav-link\">Profile</Link>\r\n                                                    </li>\r\n                                                    <li className=\"navbar-item\">\r\n                                                        <Link to=\"/jobs\" className=\"nav-link\">Add Job</Link>\r\n                                                    </li>\r\n                                                </>\r\n                                            )}\r\n                                    </>\r\n                                ) : (\r\n                                        <>\r\n                                            <li className=\"navbar-item\">\r\n                                                <Link to=\"/users\" className=\"nav-link\">Users</Link>\r\n                                            </li>\r\n                                            <li className=\"navbar-item\">\r\n                                                <Link to=\"/register\" className=\"nav-link\">Register</Link>\r\n                                            </li>\r\n                                            <li className=\"navbar-item\">\r\n                                                <Link to=\"/login\" className=\"nav-link\">Login</Link>\r\n                                            </li>\r\n                                        </>\r\n                                    )\r\n                            }\r\n                        </ul>\r\n                    </div>\r\n                </nav>\r\n            </div>\r\n        )\r\n    }\r\n}","/home/ainesh/2-2/dass/2019101067/frontend/src/components/Common/Home.js",["89"],"import React, {Component} from 'react';\nimport axios from 'axios';\n\nexport default class Home extends Component {\n    \n    constructor(props) {\n        super(props);\n        this.state = {\n            name:'',\n            email:''\n        }\n    }\n\n    componentDidMount() {\n\n    }\n\n    render() {\n        return (\n            <div>\n                Happy Coding!\n           </div>\n        )\n    }\n}","/home/ainesh/2-2/dass/2019101067/frontend/src/components/Users/UsersList.js",["90","91"],"import React, {Component} from 'react';\nimport axios from 'axios';\nimport Paper from '@material-ui/core/Paper';\nimport Grid from '@material-ui/core/Grid';\nimport TableCell from '@material-ui/core/TableCell';\nimport TableHead from '@material-ui/core/TableHead';\nimport TableRow from '@material-ui/core/TableRow';\nimport Table from '@material-ui/core/Table';\nimport TableBody from '@material-ui/core/TableBody';\nimport Button from '@material-ui/core/Button';\nimport TextField from '@material-ui/core/TextField';\nimport List from '@material-ui/core/List';\nimport ListItem from '@material-ui/core/ListItem';\nimport Divider from '@material-ui/core/Divider';\nimport Autocomplete from '@material-ui/lab/Autocomplete';\nimport IconButton from \"@material-ui/core/IconButton\";\nimport InputAdornment from \"@material-ui/core/InputAdornment\";\n\nimport SearchIcon from \"@material-ui/icons/Search\";\nimport ArrowUpwardIcon from '@material-ui/icons/ArrowUpward';\nimport ArrowDownwardIcon from '@material-ui/icons/ArrowDownward';\n\n\nclass UsersList extends Component {\n    \n    constructor(props) {\n        super(props);\n        this.state = {users: [],sortedUsers: [], sortName:true};\n        this.renderIcon = this.renderIcon.bind(this);\n        this.sortChange = this.sortChange.bind(this);\n    }\n\n    componentDidMount() {\n        axios.get('http://localhost:4000/user')\n             .then(response => {\n                 this.setState({users: response.data, sortedUsers:response.data});\n             })\n             .catch(function(error) {\n                 console.log(error);\n             })\n    }\n\n    sortChange(){\n/**\n *      Note that this is sorting only at front-end.\n */\n        var array = this.state.users;\n        var flag = this.state.sortName;\n        array.sort(function(a, b) {\n            if(a.date != undefined && b.date != undefined){\n                return (1 - flag*2) * (new Date(a.date) - new Date(b.date));\n            }\n            else{\n                return 1;\n            }\n          });\n        this.setState({\n            users:array,\n            sortName:!this.state.sortName,\n        })\n    }\n\n    renderIcon(){\n        if(this.state.sortName){\n            return(\n                <ArrowDownwardIcon/>\n            )\n        }\n        else{\n            return(\n                <ArrowUpwardIcon/>\n            )            \n        }\n    }\n\n    render() {\n        return (\n            <div>\n                <Grid container>\n                <Grid item xs={12} md={3} lg={3}>\n                    <List component=\"nav\" aria-label=\"mailbox folders\">\n                        <ListItem text>\n                                        <h3>Filters</h3>\n                        </ListItem>\n                    </List>\n                </Grid>\n                    <Grid item xs={12} md={9} lg={9}>\n                    <List component=\"nav\" aria-label=\"mailbox folders\">\n                        <TextField \n                        id=\"standard-basic\" \n                        label=\"Search\" \n                        fullWidth={true}   \n                        InputProps={{\n                            endAdornment: (\n                                <InputAdornment>\n                                    <IconButton>\n                                        <SearchIcon />\n                                    </IconButton>\n                                </InputAdornment>\n                            )}}\n                        />\n                    </List>\n                    </Grid>\n                </Grid>\n                <Grid container>\n                    <Grid item xs={12} md={3} lg={3}>\n                        <List component=\"nav\" aria-label=\"mailbox folders\">\n\n                            <ListItem button>\n                                <form noValidate autoComplete=\"off\">\n                                    <label>Salary</label>\n                                    <TextField id=\"standard-basic\" label=\"Enter Min\" fullWidth={true} />\n                                    <TextField id=\"standard-basic\" label=\"Enter Max\" fullWidth={true}/>\n                                </form>                                                                \n                            </ListItem>\n                            <Divider />\n                            <ListItem button divider>\n                                <Autocomplete\n                                    id=\"combo-box-demo\"\n                                    options={this.state.users}\n                                    getOptionLabel={(option) => option.name}\n                                    style={{ width: 300 }}\n                                    renderInput={(params) => <TextField {...params} label=\"Select Names\" variant=\"outlined\" />}\n                                />\n                            </ListItem>\n                        </List>\n                    </Grid>\n                    <Grid item xs={12} md={9} lg={9}>\n                        <Paper>\n                            <Table size=\"small\">\n                                <TableHead>\n                                    <TableRow>\n                                            <TableCell> <Button onClick={this.sortChange}>{this.renderIcon()}</Button>Date</TableCell>\n                                            <TableCell>Name</TableCell>\n                                            <TableCell>Email</TableCell>\n                                            <TableCell>Type of User</TableCell>\n                                    </TableRow>\n                                </TableHead>\n                                <TableBody>\n                                    {this.state.users.map((user,ind) => (\n                                        <TableRow key={ind}>\n                                            <TableCell>{user.date}</TableCell>\n                                            <TableCell>{user.name}</TableCell>\n                                            <TableCell>{user.email}</TableCell>\n                                            <TableCell>{user.usertype}</TableCell>\n                                        </TableRow>\n                                ))}\n                                </TableBody>\n                            </Table>\n                        </Paper>               \n                    </Grid>    \n                </Grid>            \n            </div>\n        )\n    }\n}\n\nexport default UsersList;","/home/ainesh/2-2/dass/2019101067/frontend/src/components/Common/Register.js",["92","93","94","95"],"import React, { useState } from 'react';\nimport axios from 'axios';\nimport { BrowserRouter as Router, Route, Link, useHistory } from \"react-router-dom\";\n\nconst Register = () => {\n    const history = useHistory();\n    const [name, setName] = useState(\"\");\n    const [email, setEmail] = useState(\"\");\n    const [password, setPassword] = useState(\"\");\n    const [usertype, setUsertype] = useState(\"applicant\");\n\n    const submit = async (e) => {\n        e.preventDefault();\n        const newUser = {\n            name,\n            email,\n            password,\n            usertype,\n        }\n        try {\n            axios.post('http://localhost:4000/user/register', newUser)\n                .then(res => {\n                    alert(\"Created \" + res.data.name);\n                    localStorage.setItem(\"email\", email)\n                    localStorage.setItem(\"usertype\", usertype)\n                    localStorage.setItem(\"name\", name)\n                    localStorage.setItem(\"id\", res.data._id)\n                    if (res.data.usertype == \"applicant\") {\n                        history.push('/applicantprofile');\n                    }\n                    else if (res.data.usertype == \"recruiter\") {\n                        history.push('/recruiterprofile');\n                    }\n                    console.log(res.data)\n                }).catch(err => {\n                    alert(err)\n                })\n                ;\n        }\n        catch (err) {\n            console.log(err)\n        }\n\n    }\n\n    return (\n        <div>\n            <Link to=\"/login\">Click Here To Login If You Already Have An Account</Link>\n            <form onSubmit={submit}>\n                <div className=\"form-group\">\n                    <label>Name: </label>\n                    <input type=\"text\"\n                        className=\"form-control\"\n                        onChange={(e) => setName(e.target.value)}\n                    />\n                </div>\n                <div className=\"form-group\">\n                    <label>Email: </label>\n                    <input type=\"email\"\n                        className=\"form-control\"\n                        onChange={(e) => setEmail(e.target.value)}\n                    />\n                </div>\n                <div className=\"form-group\">\n                    <label>Password: </label>\n                    <input type=\"password\"\n                        className=\"form-control\"\n                        onChange={(e) => setPassword(e.target.value)}\n                    />\n                </div>\n                <div className=\"form-group\">\n                    <label>Type of User: </label>\n                    <select name=\"usertype\" id=\"usertype\" className=\"form-control\" onChange={(e) => setUsertype(e.target.value)}>\n                        <option value=\"applicant\">Applicant</option>\n                        <option value=\"recruiter\">Recruiter</option>\n                    </select>\n                </div>\n                <div className=\"form-group\">\n                    <input type=\"submit\" value=\"Register\" className=\"btn btn-primary\" />\n                </div>\n            </form>\n        </div>\n    )\n}\nexport default Register","/home/ainesh/2-2/dass/2019101067/frontend/src/components/Common/Login.js",["96","97","98","99"],"import React, { Component } from 'react';\nimport axios from 'axios';\nimport { BrowserRouter as Router, Route, Link } from \"react-router-dom\";\n\n\nexport default class Login extends Component {\n\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            email: '',\n            password: '',\n            errors: {}\n        }\n\n        this.onChangeEmail = this.onChangeEmail.bind(this);\n        this.onChangePassword = this.onChangePassword.bind(this);\n        this.onSubmit = this.onSubmit.bind(this);\n    }\n\n    onChangeEmail(event) {\n        this.setState({ email: event.target.value });\n    }\n\n    onChangePassword(event) {\n        this.setState({ password: event.target.value });\n    }\n\n    onSubmit(e) {\n        e.preventDefault();\n        const oldUser = {\n            email: this.state.email,\n            password: this.state.password,\n        }\n        axios.post('http://localhost:4000/user/login', oldUser)\n            .then(res => {\n                localStorage.setItem(\"email\", res.data.email)\n                localStorage.setItem(\"usertype\", res.data.usertype)\n                localStorage.setItem(\"name\", res.data.name)\n                localStorage.setItem(\"id\", res.data._id)\n                alert(\"Logged In\");\n                if (res.data.usertype == \"applicant\") {\n                    this.props.history.push('/applicantprofile');\n                }\n                else if (res.data.usertype == \"recruiter\") {\n                    this.props.history.push('/recruiterprofile');\n                } console.log(res.data)\n                this.setState({ errors: res.data })\n            }).catch(err => {\n                alert(\"Error in Logging in. Please Check Email and Password.\")\n            })\n            ;\n\n        this.setState({\n            email: '',\n            password: '',\n        });\n    }\n\n    render() {\n        return (\n            <div>\n                <Link to=\"/register\">Click Here To Register If You Do Not Have An Account</Link>\n                <form onSubmit={this.onSubmit}>\n                    <div className=\"form-group\">\n                        <label>Email: </label>\n                        <input type=\"email\"\n                            className=\"form-control\"\n                            value={this.state.email}\n                            onChange={this.onChangeEmail}\n                        />\n                    </div>\n                    <div className=\"form-group\">\n                        <label>Password: </label>\n                        <input type=\"password\"\n                            className=\"form-control\"\n                            value={this.state.password}\n                            onChange={this.onChangePassword}\n                        />\n                    </div>\n                    <div className=\"form-group\">\n                        <input type=\"submit\" value=\"Login\" className=\"btn btn-primary\" />\n                    </div>\n                </form>\n            </div>\n        )\n    }\n}","/home/ainesh/2-2/dass/2019101067/frontend/src/components/Recruiter/RecruiterProfile.js",["100","101","102"],"import React, { useEffect, useState } from 'react';\r\nimport axios from 'axios';\r\nimport { BrowserRouter as Router, Route, Link, useHistory } from \"react-router-dom\";\r\n\r\n\r\nconst RecruiterProfile = () => {\r\n    const history = useHistory();\r\n    const [name, setName] = useState(\"\");\r\n    const [contact_number, setContact_Number] = useState(\"\");\r\n    const [bio, setBio] = useState(\"\");\r\n    const wordLimit = 250;\r\n    const [wordCount, setWordcount] = useState(\"\");\r\n    const [charLimit, setCharlimit] = useState(\"\");\r\n    const [updated_bio, setUpdated_Bio] = useState(\"\");\r\n    const [updated_contact_number, setUpdated_Contact_Number] = useState(\"\");\r\n\r\n    useEffect(() => {\r\n        const User = {\r\n            name: localStorage.getItem(\"name\"),\r\n            email: localStorage.getItem(\"email\"),\r\n            contact_number,\r\n            bio\r\n        }\r\n        axios.post(\"http://localhost:4000/user/recruiterinfo\", User)\r\n            .then(res => {\r\n                setContact_Number(res.data.contact_number)\r\n                setBio(res.data.bio)\r\n                console.log(User)\r\n            })\r\n            .catch(function(error) {\r\n                console.log(error);\r\n            })\r\n    })\r\n\r\n    const edit = async (e) => {\r\n        e.preventDefault();\r\n        const User = {\r\n            name,\r\n            email: localStorage.getItem(\"email\"),\r\n            contact_number : updated_contact_number,\r\n            bio : updated_bio\r\n        }\r\n        try {\r\n            axios.post('http://localhost:4000/user/editrecruiter', User)\r\n                .then(res => {\r\n                    alert(\"Edited User\");\r\n                    localStorage.setItem(\"name\", res.data.name)\r\n                    console.log(res.data);\r\n                })\r\n        }\r\n        catch (err) {\r\n            console.log(err)\r\n        }\r\n    }\r\n\r\n    let WordLimitMessage;\r\n    var result = wordLimit - wordCount;\r\n    if (result < 0) {\r\n        WordLimitMessage = (\r\n            <p>\r\n                You Have Reached the Maximum Number of Words\r\n            </p>\r\n        );\r\n    }\r\n    else {\r\n        WordLimitMessage = (\r\n            <p>\r\n                {result} Words Left\r\n            </p>\r\n        );\r\n    }\r\n\r\n\r\n    const wordCheck = (event) => {\r\n        const wordCount =\r\n            event.target.value === \"\" ? 0 : event.target.value.split(\" \").length;\r\n        setUpdated_Bio(event.target.value);\r\n        setWordcount(wordCount);\r\n        setCharlimit(wordLimit - wordCount < 0 ? bio.length : null)\r\n    }\r\n\r\n    const submit = async (e) => {\r\n        e.preventDefault();\r\n        localStorage.removeItem(\"email\");\r\n        localStorage.removeItem(\"usertype\");\r\n        localStorage.removeItem(\"name\");\r\n        localStorage.removeItem(\"id\");\r\n        history.push('/login');\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <p>Email: {localStorage.getItem(\"email\")}</p>\r\n            <p>Name: {localStorage.getItem(\"name\")}</p>\r\n            <p>Contact Number: {contact_number}</p>\r\n            <p>Bio: {bio}</p>\r\n            <form onSubmit={edit}>\r\n                <div className=\"form-group\">\r\n                    <label>Name: </label>\r\n                    <input type=\"text\"\r\n                        className=\"form-control\"\r\n                        onChange={(e) => setName(e.target.value)}\r\n                    />\r\n                </div>\r\n                <div className=\"form-group\">\r\n                    <label>Contact Number: </label>\r\n                    <input type=\"number\"\r\n                        className=\"form-control\"\r\n                        min=\"0000000000\"\r\n                        max=\"9999999999\"\r\n                        onChange={(e) => setUpdated_Contact_Number(e.target.value)}\r\n                    />\r\n                </div>\r\n                <div className=\"form-group\">\r\n                    <label>Bio: </label>\r\n                    <textarea\r\n                        type=\"text\"\r\n                        className=\"form-control\"\r\n                        onChange={(e) => wordCheck(e)}\r\n                        maxLength={charLimit}\r\n                    />\r\n                    {WordLimitMessage}\r\n                </div>\r\n                <div className=\"form-group\">\r\n                    <input type=\"submit\" value=\"Edit Profile\" className=\"btn btn-primary\" />\r\n                </div>\r\n            </form>\r\n            <form onSubmit={submit}>\r\n                <div className=\"form-group\">\r\n                    <input type=\"submit\" value=\"Log Out\" className=\"btn btn-primary\" />\r\n                </div>\r\n            </form>\r\n        </div >\r\n    )\r\n}\r\nexport default RecruiterProfile","/home/ainesh/2-2/dass/2019101067/frontend/src/components/Applicant/ApplicantProfile.js",["103","104","105","106","107"],"import React, { useEffect, useState } from 'react';\nimport axios from 'axios';\nimport { BrowserRouter as Router, Route, Link, useHistory } from \"react-router-dom\";\nimport * as M from \"@material-ui/core\";\nimport Grid from \"@material-ui/core/Grid\";\nimport TextField from \"@material-ui/core/TextField\";\nimport Autocomplete from \"@material-ui/lab/Autocomplete\";\n\nconst ApplicantProfile = () => {\n    const history = useHistory();\n    const [name, setName] = useState(\"\");\n    const [education, setEducation] = useState(\"\");\n    const [skills, setSkills] = useState(\"\");\n    const [updated_education, setUpdated_Education] = useState(\"\");\n    const [updated_skills, setUpdated_Skills] = useState(\"\");\n\n    useEffect(() => {\n        const User = {\n            name: localStorage.getItem(\"name\"),\n            email: localStorage.getItem(\"email\"),\n            skills,\n            education\n        }\n        axios.post(\"http://localhost:4000/user/applicantinfo\", User)\n            .then(res => {\n                setEducation(res.data.education)\n                setSkills(res.data.skills)\n                console.log(User)\n            })\n            .catch(function(error) {\n                console.log(error);\n            })\n    })\n\n    const edit = async (e) => {\n        e.preventDefault();\n        const User = {\n            name,\n            education : updated_education,\n            email: localStorage.getItem(\"email\"),\n            skills : updated_skills\n        }\n        try {\n            axios.post('http://localhost:4000/user/editapplicant', User)\n                .then(res => {\n                    alert(\"Edited User\");\n                    localStorage.setItem(\"name\", res.data.name)\n                    console.log(res.data);\n                })\n        }\n        catch (err) {\n            console.log(err)\n        }\n    }\n\n    const submit = async (e) => {\n        e.preventDefault();\n        localStorage.removeItem(\"email\");\n        localStorage.removeItem(\"usertype\");\n        localStorage.removeItem(\"name\");\n        localStorage.removeItem(\"id\");\n        history.push('/login');\n    }\n\n    return (\n        <div>\n            <p>Email: {localStorage.getItem(\"email\")}</p>\n            <p>Name: {localStorage.getItem(\"name\")}</p>\n            <p>Skills: {skills}</p>\n            {/* <p>Education: {education}</p> */}\n            <form onSubmit={edit}>\n                <div className=\"form-group\">\n                    <label>Name: </label>\n                    <input type=\"text\"\n                        className=\"form-control\"\n                        onChange={(e) => setName(e.target.value)}\n                    />\n                </div>\n                {/* <div className=\"form-group\">\n                    <label>Education: </label>\n                    <input type=\"text\"\n                        className=\"form-control\"\n                        onChange={(e) => setUpdated_Education(e.target.value)}\n                    />\n                </div> */}\n                <Grid container>\n                    <Grid item xs={12} md={3} lg={3}>\n                        <Autocomplete\n                            freeSolo\n                            multiple\n                            id=\"combo-box-demo\"\n                            options={[\n                                \"C\",\n                                \"C++\",\n                                \"CSS\",\n                                \"HTML\",\n                                \"Java\",\n                                \"JavaScript\",\n                                \"Python\",\n                                \"Flutter\",\n                                \"Objective-C\",\n                                \"PHP\",\n                                \"Swift\",\n                                \"GoLang\",\n                            ].map((option) => option)}\n                            getOptionLabel={(option) => option}\n                            style={{ width: 1110 }}\n                            onChange={(event, newValue) => {\n                                setUpdated_Skills(newValue);\n                            }}\n                            renderInput={(params) => (\n                                <TextField\n                                    {...params}\n                                    label=\"Add Skill\"\n                                    variant=\"outlined\"\n                                />\n                            )}\n                        />\n                    </Grid>\n                </Grid>\n                <div className=\"form-group\">\n                    <input type=\"submit\" value=\"Edit Profile\" className=\"btn btn-primary\" />\n                </div>\n            </form>\n            <form onSubmit={submit}>\n                <div className=\"form-group\">\n                    <input type=\"submit\" value=\"Log Out\" className=\"btn btn-primary\" />\n                </div>\n            </form>\n        </div >\n    )\n}\nexport default ApplicantProfile","/home/ainesh/2-2/dass/2019101067/frontend/src/components/Applicant/JobListings.js",["108","109"],"import React, {Component} from 'react';\nimport axios from 'axios';\nimport Paper from '@material-ui/core/Paper';\nimport Grid from '@material-ui/core/Grid';\nimport TableCell from '@material-ui/core/TableCell';\nimport TableHead from '@material-ui/core/TableHead';\nimport TableRow from '@material-ui/core/TableRow';\nimport Table from '@material-ui/core/Table';\nimport TableBody from '@material-ui/core/TableBody';\nimport Button from '@material-ui/core/Button';\nimport TextField from '@material-ui/core/TextField';\nimport List from '@material-ui/core/List';\nimport ListItem from '@material-ui/core/ListItem';\nimport Divider from '@material-ui/core/Divider';\nimport Autocomplete from '@material-ui/lab/Autocomplete';\nimport IconButton from \"@material-ui/core/IconButton\";\nimport InputAdornment from \"@material-ui/core/InputAdornment\";\n\nimport SearchIcon from \"@material-ui/icons/Search\";\nimport ArrowUpwardIcon from '@material-ui/icons/ArrowUpward';\nimport ArrowDownwardIcon from '@material-ui/icons/ArrowDownward';\n\n\nclass JobListings extends Component {\n    \n    constructor(props) {\n        super(props);\n        this.state = {jobs: [],sortedJobs: [], sortName:true};\n        this.renderIcon = this.renderIcon.bind(this);\n        this.sortChange = this.sortChange.bind(this);\n    }\n\n    componentDidMount() {\n        axios.get('http://localhost:4000/job')\n             .then(response => {\n                 this.setState({jobs: response.data, sortedJobs:response.data});\n             })\n             .catch(function(error) {\n                 console.log(error);\n             })\n    }\n\n    Apply (_id){\n        localStorage.setItem(\"job_id\", _id);\n        this.props.history.push('/applications');\n    }\n\n    sortChange(){\n/**\n *      Note that this is sorting only at front-end.\n */\n        var array = this.state.jobs;\n        var flag = this.state.sortName;\n        array.sort(function(a, b) {\n            if(a.date != undefined && b.date != undefined){\n                return (1 - flag*2) * (new Date(a.date) - new Date(b.date));\n            }\n            else{\n                return 1;\n            }\n          });\n        this.setState({\n            jobs:array,\n            sortName:!this.state.sortName,\n        })\n    }\n\n    renderIcon(){\n        if(this.state.sortName){\n            return(\n                <ArrowDownwardIcon/>\n            )\n        }\n        else{\n            return(\n                <ArrowUpwardIcon/>\n            )            \n        }\n    }\n\n    render() {\n        return (\n            <div>\n                <Grid container>\n                <Grid item xs={12} md={3} lg={3}>\n                    <List component=\"nav\" aria-label=\"mailbox folders\">\n                        <ListItem text>\n                                        <h3>Filters</h3>\n                        </ListItem>\n                    </List>\n                </Grid>\n                    <Grid item xs={12} md={9} lg={9}>\n                    <List component=\"nav\" aria-label=\"mailbox folders\">\n                        <TextField \n                        id=\"standard-basic\" \n                        label=\"Search\" \n                        fullWidth={true}   \n                        InputProps={{\n                            endAdornment: (\n                                <InputAdornment>\n                                    <IconButton>\n                                        <SearchIcon />\n                                    </IconButton>\n                                </InputAdornment>\n                            )}}\n                        />\n                    </List>\n                    </Grid>\n                </Grid>\n                <Grid container>\n                    <Grid item xs={12} md={3} lg={3}>\n                        <List component=\"nav\" aria-label=\"mailbox folders\">\n\n                            <ListItem button>\n                                <form noValidate autoComplete=\"off\">\n                                    <label>Salary</label>\n                                    <TextField id=\"standard-basic\" label=\"Enter Min\" fullWidth={true} />\n                                    <TextField id=\"standard-basic\" label=\"Enter Max\" fullWidth={true}/>\n                                </form>                                                                \n                            </ListItem>\n                            <Divider />\n                            <ListItem button divider>\n                                <Autocomplete\n                                    id=\"combo-box-demo\"\n                                    options={this.state.jobs}\n                                    getOptionLabel={(option) => option.title}\n                                    style={{ width: 300 }}\n                                    renderInput={(params) => <TextField {...params} label=\"Select Names\" variant=\"outlined\" />}\n                                />\n                            </ListItem>\n                        </List>\n                    </Grid>\n                    <Grid item xs={12} md={9} lg={9}>\n                        <Paper>\n                            <Table size=\"small\">\n                                <TableHead>\n                                    <TableRow>\n                                            <TableCell> <Button onClick={this.sortChange}>{this.renderIcon()}</Button>Title</TableCell>\n                                            <TableCell>Type</TableCell>\n                                            <TableCell>Duration (months)</TableCell>\n                                            <TableCell>Salary (/month)</TableCell>\n                                            <TableCell>Application Deadline</TableCell>\n                                            <TableCell>Skills Required</TableCell>\n                                    </TableRow>\n                                </TableHead>\n                                <TableBody>\n                                    {this.state.jobs.map((job,ind) => (\n                                        <TableRow key={ind}>\n                                            <TableCell>{job.title}</TableCell>\n                                            <TableCell>{job.type}</TableCell>\n                                            <TableCell>{job.duration}</TableCell>\n                                            <TableCell>{job.salary}</TableCell>\n                                            <TableCell>{job.application_deadline}</TableCell>\n                                            <TableCell>{job.required_skills}</TableCell>\n                                            <TableCell>\n                                                <button\n                                                    onClick={() => this.Apply(job._id)}\n                                                    className=\"btn btn-primary\"\n                                                >\n                                                    Apply\n                                            </button>\n                                            </TableCell>\n                                        </TableRow>\n                                ))}\n                                </TableBody>\n                            </Table>\n                        </Paper>               \n                    </Grid>    \n                </Grid>            \n            </div>\n        )\n    }\n}\n\nexport default JobListings;","/home/ainesh/2-2/dass/2019101067/frontend/src/components/Recruiter/CreateJobs.js",["110","111","112","113","114"],"import React, { useState } from 'react';\nimport axios from 'axios';\nimport { BrowserRouter as Router, Route, Link, useHistory } from \"react-router-dom\";\nimport * as M from \"@material-ui/core\";\nimport Grid from \"@material-ui/core/Grid\";\nimport TextField from \"@material-ui/core/TextField\";\nimport Autocomplete from \"@material-ui/lab/Autocomplete\";\n\nconst Jobs = () => {\n\n    const [title, setTitle] = useState(\"\");\n    // const [recruiter_name, setRecruiter_Name] = useState(\"\");\n    // const [recruiter_emailid, setRecruiter_EmailID] = useState(\"\");\n    const [max_applications, setMax_Applications] = useState(\"\");\n    const [max_positions, setMax_Positions] = useState(\"\");\n    const [application_deadline, setApplication_Deadline] = useState(\"\");\n    const [required_skills, setRequired_Skills] = useState(\"\");\n    const [type, setType] = useState(\"full-time\");\n    const [duration, setDuration] = useState(\"\");\n    const [salary, setSalary] = useState(\"\");\n\n    const submit = async (e) => {\n        e.preventDefault();\n        const newJob = {\n            title,\n            recruiter_name: localStorage.getItem(\"name\"),\n            recruiter_emailid: localStorage.getItem(\"email\"),\n            max_applications,\n            max_positions,\n            application_deadline,\n            required_skills,\n            type,\n            duration,\n            salary,\n            status : \"active\"\n        }\n        console.log(newJob)\n        try {\n            axios.post('http://localhost:4000/job/create', newJob)\n                .then(res => {\n                    alert(\"Created Job \" + res.data.title);\n                    console.log(res.data)\n                }).catch(err => {\n                    alert(err + newJob.recruiter_name)\n                })\n                ;\n        }\n        catch (err) {\n            console.log(err)\n        }\n\n    }\n\n    return (\n        <div>\n            <form onSubmit={submit}>\n                <div className=\"form-group\">\n                    <label>Job Title: </label>\n                    <input type=\"text\"\n                        className=\"form-control\"\n                        onChange={(e) => setTitle(e.target.value)}\n                    />\n                </div>\n                <div className=\"form-group\">\n                    <label>Maximum Number of Applications: </label>\n                    <input type=\"number\"\n                        className=\"form-control\"\n                        min=\"1\"\n                        onChange={(e) => setMax_Applications(e.target.value)}\n                    />\n                </div>\n                <div className=\"form-group\">\n                    <label>Maximum Number of Positions: </label>\n                    <input type=\"number\"\n                        className=\"form-control\"\n                        min=\"1\"\n                        onChange={(e) => setMax_Positions(e.target.value)}\n                    />\n                </div>\n                <div className=\"form-group\">\n                    <label>Application Deadline: </label>\n                    <input type=\"datetime-local\"\n                        className=\"form-control\"\n                        onChange={(e) => setApplication_Deadline(e.target.value)}\n                    />\n                </div>\n                <div className=\"form-group\">\n                    <label>Type of Job: </label>\n                    <select name=\"type\" id=\"type\" className=\"form-control\" onChange={(e) => setType(e.target.value)}>\n                        <option value=\"full-time\">Full Time</option>\n                        <option value=\"part-time\">Part Time</option>\n                        <option value=\"work-from-home\">Work From Home</option>\n                    </select>\n                </div>\n                <div className=\"form-group\">\n                    <label>Duration (in months): </label>\n                    <input type=\"number\"\n                        className=\"form-control\"\n                        min=\"0\"\n                        max=\"6\"\n                        onChange={(e) => setDuration(e.target.value)}\n                    />\n                </div>\n                <div className=\"form-group\">\n                    <label>Salary (per month): </label>\n                    <input type=\"number\"\n                        className=\"form-control\"\n                        onChange={(e) => setSalary(e.target.value)}\n                    />\n                </div>\n                <Grid container>\n                    <Grid item xs={12} md={3} lg={3}>\n                        <Autocomplete\n                            freeSolo\n                            multiple\n                            id=\"combo-box-demo\"\n                            options={[\n                                \"C\",\n                                \"C++\",\n                                \"CSS\",\n                                \"HTML\",\n                                \"Java\",\n                                \"JavaScript\",\n                                \"Python\",\n                                \"Flutter\",\n                                \"Objective-C\",\n                                \"PHP\",\n                                \"Swift\",\n                                \"GoLang\",\n                            ].map((option) => option)}\n                            getOptionLabel={(option) => option}\n                            style={{ width: 1110 }}\n                            onChange={(event, newValue) => {\n                                setRequired_Skills(newValue);\n                            }}\n                            renderInput={(params) => (\n                                <TextField\n                                    {...params}\n                                    label=\"Add Skill\"\n                                    variant=\"outlined\"\n                                />\n                            )}\n                        />\n                    </Grid>\n                </Grid>\n                <div className=\"form-group\">\n                    <input type=\"submit\" value=\"Create Job\" className=\"btn btn-primary\" />\n                </div>\n            </form>\n        </div>\n    )\n}\nexport default Jobs","/home/ainesh/2-2/dass/2019101067/frontend/src/components/Recruiter/EditJobs.js",["115","116","117","118","119","120","121","122","123","124"],"import React, { Component } from 'react';\nimport axios from 'axios';\nimport Paper from '@material-ui/core/Paper';\nimport Grid from '@material-ui/core/Grid';\nimport TableCell from '@material-ui/core/TableCell';\nimport TableHead from '@material-ui/core/TableHead';\nimport TableRow from '@material-ui/core/TableRow';\nimport Table from '@material-ui/core/Table';\nimport TableBody from '@material-ui/core/TableBody';\nimport Button from '@material-ui/core/Button';\nimport TextField from '@material-ui/core/TextField';\nimport List from '@material-ui/core/List';\nimport ListItem from '@material-ui/core/ListItem';\nimport Divider from '@material-ui/core/Divider';\nimport Autocomplete from '@material-ui/lab/Autocomplete';\nimport IconButton from \"@material-ui/core/IconButton\";\nimport InputAdornment from \"@material-ui/core/InputAdornment\";\n\nimport SearchIcon from \"@material-ui/icons/Search\";\nimport ArrowUpwardIcon from '@material-ui/icons/ArrowUpward';\nimport ArrowDownwardIcon from '@material-ui/icons/ArrowDownward';\n\n\nclass EditJobs extends Component {\n\n    constructor(props) {\n        super(props);\n        this.state = { jobs: [], sortedJobs: [], sortName: true };\n        this.renderIcon = this.renderIcon.bind(this);\n        this.sortChange = this.sortChange.bind(this);\n    }\n\n    componentDidMount() {\n        const CurrUser = {\n            recruiter_emailid: localStorage.getItem(\"email\")\n        }\n        axios.post('http://localhost:4000/job/ownjobs', CurrUser)\n            .then(response => {\n                this.setState({ jobs: response.data, sortedJobs: response.data });\n            })\n            .catch(function (error) {\n                console.log(error);\n            })\n    }\n\n    sortChange() {\n        /**\n         *      Note that this is sorting only at front-end.\n         */\n        var array = this.state.jobs;\n        var flag = this.state.sortName;\n        array.sort(function (a, b) {\n            if (a.date != undefined && b.date != undefined) {\n                return (1 - flag * 2) * (new Date(a.date) - new Date(b.date));\n            }\n            else {\n                return 1;\n            }\n        });\n        this.setState({\n            jobs: array,\n            sortName: !this.state.sortName,\n        })\n    }\n\n    EditJob(_id) {\n        localStorage.setItem(\"job_id\", _id);\n        this.props.history.push('/editjobvals');\n\n    }\n\n    DeleteJob(id) {\n        const Job = {\n            _id : id\n        }\n        axios.post('http://localhost:4000/job/delete', Job)\n            .then(res => {\n                alert(\"Deleted Job \" + res.data.title)\n            }).catch(err => {\n                alert(err)\n            })\n    }\n\n    ShowApplications(id) {\n        localStorage.setItem(\"job_id\", id);\n        this.props.history.push('/manageapplications');\n    }\n\n    renderIcon() {\n        if (this.state.sortName) {\n            return (\n                <ArrowDownwardIcon />\n            )\n        }\n        else {\n            return (\n                <ArrowUpwardIcon />\n            )\n        }\n    }\n\n    render() {\n        return (\n            <div>\n                <Grid container>\n                    <Grid item xs={12} md={9} lg={9}>\n                        <Paper>\n                            <Table size=\"small\">\n                                <TableHead>\n                                    <TableRow>\n                                        <TableCell> <Button onClick={this.sortChange}>{this.renderIcon()}</Button>Title</TableCell>\n                                        <TableCell>Type</TableCell>\n                                        <TableCell>Duration</TableCell>\n                                        <TableCell>Salary</TableCell>\n                                        <TableCell>Application Deadline</TableCell>\n                                        <TableCell>Skills Required</TableCell>\n                                        <TableCell>Job Status</TableCell>\n                                    </TableRow>\n                                </TableHead>\n                                <TableBody>\n                                    {this.state.jobs.map((job, ind) => (\n                                        <TableRow key={ind}>\n                                            <TableCell>{job.title}</TableCell>\n                                            <TableCell>{job.type}</TableCell>\n                                            <TableCell>{job.duration}</TableCell>\n                                            <TableCell>{job.salary}</TableCell>\n                                            <TableCell>{job.application_deadline}</TableCell>\n                                            <TableCell>{job.required_skills}</TableCell>\n                                            <TableCell>{job.status}</TableCell>\n                                            <TableCell>\n                                                <button\n                                                    onClick={() => this.EditJob(job._id)}\n                                                    className=\"btn btn-primary\"\n                                                >\n                                                    Edit\n                                            </button>\n                                            </TableCell>\n                                            <TableCell>\n                                                <button\n                                                    onClick={() => this.DeleteJob(job._id)}\n                                                    className=\"btn btn-primary\"\n                                                >\n                                                    Delete\n                                            </button>\n                                            </TableCell>\n                                            <TableCell>\n                                                <button\n                                                    onClick={() => this.ShowApplications(job._id)}\n                                                    className=\"btn btn-primary\"\n                                                >\n                                                    Show Applicants\n                                            </button>\n                                            </TableCell>\n                                        </TableRow>\n                                    ))}\n                                </TableBody>\n                            </Table>\n                        </Paper>\n                    </Grid>\n                </Grid>\n            </div>\n        )\n    }\n}\n\nexport default EditJobs;",["125","126"],"/home/ainesh/2-2/dass/2019101067/frontend/src/components/Recruiter/EditJobVals.js",["127","128","129","130","131","132","133"],"import React, { useState } from 'react';\nimport axios from 'axios';\nimport { BrowserRouter as Router, Route, Link, useHistory } from \"react-router-dom\";\nimport * as M from \"@material-ui/core\";\nimport Grid from \"@material-ui/core/Grid\";\nimport TextField from \"@material-ui/core/TextField\";\nimport Autocomplete from \"@material-ui/lab/Autocomplete\";\n\nconst EditJobVals = () => {\n    const history = useHistory();\n    const [max_applications, setMax_Applications] = useState(\"\");\n    const [max_positions, setMax_Positions] = useState(\"\");\n    const [application_deadline, setApplication_Deadline] = useState(\"\");\n\n    const submit = async (e) => {\n        e.preventDefault();\n        const idtemp = localStorage.getItem(\"job_id\")\n        const newJob = {\n            max_applications : max_applications,\n            max_positions : max_positions,\n            application_deadline : application_deadline,\n            _id : idtemp\n        }\n        console.log(newJob)\n        try {\n            axios.post('http://localhost:4000/job/edit', newJob)\n                .then(res => {\n                    alert(\"Edited Job\");\n                    console.log(res.data)\n                    localStorage.removeItem(\"job_id\")\n                    history.push('/editjobs')\n                }).catch(err => {\n                    alert(err)\n                })\n                ;\n        }\n        catch (err) {\n            console.log(err)\n        }\n\n    }\n\n    return (\n        <div>\n            <form onSubmit={submit}>\n                <div className=\"form-group\">\n                    <label>Maximum Number of Applications: </label>\n                    <input type=\"number\"\n                        className=\"form-control\"\n                        min=\"1\"\n                        onChange={(e) => setMax_Applications(e.target.value)}\n                    />\n                </div>\n                <div className=\"form-group\">\n                    <label>Maximum Number of Positions: </label>\n                    <input type=\"number\"\n                        className=\"form-control\"\n                        min=\"1\"\n                        onChange={(e) => setMax_Positions(e.target.value)}\n                    />\n                </div>\n                <div className=\"form-group\">\n                    <label>Application Deadline: </label>\n                    <input type=\"datetime-local\"\n                        className=\"form-control\"\n                        onChange={(e) => setApplication_Deadline(e.target.value)}\n                    />\n                </div>\n                <div className=\"form-group\">\n                    <input type=\"submit\" value=\"Edit Job\" className=\"btn btn-primary\" />\n                </div>\n            </form>\n        </div>\n    )\n}\nexport default EditJobVals","/home/ainesh/2-2/dass/2019101067/frontend/src/components/Applicant/Applications.js",["134","135","136","137"],"import React, { useEffect, useState } from 'react';\nimport axios from 'axios';\nimport { BrowserRouter as Router, Route, Link, useHistory } from \"react-router-dom\";\n\n\nconst Applications = () => {\n    const history = useHistory();\n    const [sop, setSop] = useState(\"\");\n    const wordLimit = 250;\n    const [wordCount, setWordcount] = useState(\"\");\n    const [charLimit, setCharlimit] = useState(\"\");\n\n    let WordLimitMessage;\n    var result = wordLimit - wordCount;\n    if (result < 0) {\n        WordLimitMessage = (\n            <p>\n                You Have Reached the Maximum Number of Words\n            </p>\n        );\n    }\n    else {\n        WordLimitMessage = (\n            <p>\n                {result} Words Left\n            </p>\n        );\n    }\n\n\n    const wordCheck = (event) => {\n        const wordCount =\n            event.target.value === \"\" ? 0 : event.target.value.split(\" \").length;\n        setSop(event.target.value);\n        setWordcount(wordCount);\n        setCharlimit(wordLimit - wordCount < 0 ? sop.length : null)\n    }\n\n    const submit = async (e) => {\n        e.preventDefault();\n        const Application = {\n            applicant_name: localStorage.getItem(\"name\"),\n            applicant_email: localStorage.getItem(\"email\"),\n            job_id: localStorage.getItem(\"job_id\"),\n            sop\n        }\n        axios.post(\"http://localhost:4000/job/apply\", Application)\n            .then(res => {\n                alert(\"Applied\");\n                console.log(res.data);\n\n            }).catch(err => {\n                alert(err)\n            })\n        localStorage.removeItem(\"job_id\");\n        history.push('/applicantprofile');\n    }\n\n    return (\n        <div>\n            <form onSubmit={submit}>\n                <div className=\"form-group\">\n                    <label>SOP: </label>\n                    <textarea\n                        type=\"text\"\n                        className=\"form-control\"\n                        onChange={(e) => wordCheck(e)}\n                        maxLength={charLimit}\n                    />\n                    {WordLimitMessage}\n                </div>\n                <div className=\"form-group\">\n                    <input type=\"submit\" value=\"Submit\" className=\"btn btn-primary\" />\n                </div>\n            </form>\n        </div >\n    )\n}\nexport default Applications","/home/ainesh/2-2/dass/2019101067/frontend/src/components/Recruiter/ManageApplications.js",["138","139","140","141","142","143","144","145","146","147"],"import React, { Component } from 'react';\nimport axios from 'axios';\nimport Paper from '@material-ui/core/Paper';\nimport Grid from '@material-ui/core/Grid';\nimport TableCell from '@material-ui/core/TableCell';\nimport TableHead from '@material-ui/core/TableHead';\nimport TableRow from '@material-ui/core/TableRow';\nimport Table from '@material-ui/core/Table';\nimport TableBody from '@material-ui/core/TableBody';\nimport Button from '@material-ui/core/Button';\nimport TextField from '@material-ui/core/TextField';\nimport List from '@material-ui/core/List';\nimport ListItem from '@material-ui/core/ListItem';\nimport Divider from '@material-ui/core/Divider';\nimport Autocomplete from '@material-ui/lab/Autocomplete';\nimport IconButton from \"@material-ui/core/IconButton\";\nimport InputAdornment from \"@material-ui/core/InputAdornment\";\nimport emailjs from 'emailjs-com';\n\nimport SearchIcon from \"@material-ui/icons/Search\";\nimport ArrowUpwardIcon from '@material-ui/icons/ArrowUpward';\nimport ArrowDownwardIcon from '@material-ui/icons/ArrowDownward';\n\n\nclass ManageApplications extends Component {\n\n    constructor(props) {\n        super(props);\n        this.state = { applications: [], sortedApplications: [], sortName: true };\n        this.renderIcon = this.renderIcon.bind(this);\n        this.sortChange = this.sortChange.bind(this);\n    }\n\n    componentDidMount() {\n        const Job = {\n            _id: localStorage.getItem(\"job_id\")\n        }\n        axios.post('http://localhost:4000/job/getapplications', Job)\n            .then(response => {\n                console.log(response.data)\n                this.setState({ applications: response.data, sortedApplications: response.data });\n            })\n            .catch(function (error) {\n                console.log(error);\n            })\n    }\n\n    Reject(id) {\n        const Application = {\n            _id: id\n        }\n        axios.post('http://localhost:4000/job/reject', Application)\n            .then(res => {\n                alert(\"Rejected Application\")\n            }).catch(err => {\n                alert(err)\n            })\n    }\n\n    Accept(application) {\n        const appname = application.applicant_name\n        const appemail = application.applicant_email\n        const fromname = localStorage.getItem(\"name\")\n        console.log(fromname)\n        console.log(appname)\n        console.log(appemail)\n        emailjs.send('dass', 'template_giv8byb', { message: \"Congrats you have been accepted for: \", from_name: fromname, to_name: appname, to_email: appemail }, 'user_qv94Jf1qCvuYJjkmiIgXT')\n            .then((response) => {\n                console.log('SUCCESS!', response.status, response.text);\n            }, (err) => {\n                console.log('FAILED...', err);\n            });\n        alert(\"Accepted Application\")\n        axios.post('http://localhost:4000/job/accept', application)\n            .then(res => {\n                alert(\"Accepted Application\")\n            }).catch(err => {\n                alert(err)\n            })\n    }\n\n    sortChange() {\n        /**\n         *      Note that this is sorting only at front-end.\n         */\n        var array = this.state.applications;\n        var flag = this.state.sortName;\n        array.sort(function (a, b) {\n            if (a.date != undefined && b.date != undefined) {\n                return (1 - flag * 2) * (new Date(a.date) - new Date(b.date));\n            }\n            else {\n                return 1;\n            }\n        });\n        this.setState({\n            applications: array,\n            sortName: !this.state.sortName,\n        })\n    }\n\n    renderIcon() {\n        if (this.state.sortName) {\n            return (\n                <ArrowDownwardIcon />\n            )\n        }\n        else {\n            return (\n                <ArrowUpwardIcon />\n            )\n        }\n    }\n\n    render() {\n        return (\n            <div>\n                <Grid container>\n                    <Grid item xs={12} md={9} lg={9}>\n                        <Paper>\n                            <Table size=\"small\">\n                                <TableHead>\n                                    <TableRow>\n                                        <TableCell> <Button onClick={this.sortChange}>{this.renderIcon()}</Button>Title</TableCell>\n                                        <TableCell>Name</TableCell>\n                                        <TableCell>Skills</TableCell>\n                                        <TableCell>Date of Application</TableCell>\n                                        <TableCell>SOP</TableCell>\n                                        <TableCell>Stage of Application</TableCell>\n                                    </TableRow>\n                                </TableHead>\n                                <TableBody>\n                                    {this.state.applications.map((application, ind) => (\n                                        <TableRow key={ind}>\n                                            <TableCell>{ }</TableCell>\n                                            <TableCell>{application.applicant_name}</TableCell>\n                                            <TableCell>{ }</TableCell>\n                                            <TableCell>{application.date}</TableCell>\n                                            <TableCell>{application.sop}</TableCell>\n                                            <TableCell>{application.state}</TableCell>\n                                            <TableCell>\n                                                <button\n                                                    className=\"btn btn-primary\"\n                                                    onClick={() => this.Accept(application)}\n                                                >\n                                                    Accept\n                                            </button>\n                                            </TableCell>\n                                            <TableCell>\n                                                <button\n                                                    className=\"btn btn-primary\"\n                                                >\n                                                    Shortlist\n                                            </button>\n                                            </TableCell>\n                                            <TableCell>\n                                                <button\n                                                    onClick={() => this.Reject(application._id)}\n                                                    className=\"btn btn-primary\"\n                                                >\n                                                    Reject\n                                            </button>\n                                            </TableCell>\n                                        </TableRow>\n                                    ))}\n                                </TableBody>\n                            </Table>\n                        </Paper>\n                    </Grid>\n                </Grid>\n            </div>\n        )\n    }\n}\n\nexport default ManageApplications;",{"ruleId":"148","replacedBy":"149"},{"ruleId":"150","replacedBy":"151"},{"ruleId":"152","severity":1,"message":"153","line":2,"column":42,"nodeType":"154","messageId":"155","endLine":2,"endColumn":46},{"ruleId":"152","severity":1,"message":"156","line":2,"column":27,"nodeType":"154","messageId":"155","endLine":2,"endColumn":33},{"ruleId":"152","severity":1,"message":"157","line":2,"column":35,"nodeType":"154","messageId":"155","endLine":2,"endColumn":40},{"ruleId":"158","severity":1,"message":"159","line":7,"column":5,"nodeType":"160","messageId":"161","endLine":9,"endColumn":6},{"ruleId":"162","severity":1,"message":"163","line":21,"column":75,"nodeType":"164","messageId":"165","endLine":21,"endColumn":77},{"ruleId":"152","severity":1,"message":"166","line":2,"column":8,"nodeType":"154","messageId":"155","endLine":2,"endColumn":13},{"ruleId":"162","severity":1,"message":"167","line":50,"column":23,"nodeType":"164","messageId":"165","endLine":50,"endColumn":25},{"ruleId":"162","severity":1,"message":"167","line":50,"column":46,"nodeType":"164","messageId":"165","endLine":50,"endColumn":48},{"ruleId":"152","severity":1,"message":"156","line":3,"column":27,"nodeType":"154","messageId":"155","endLine":3,"endColumn":33},{"ruleId":"152","severity":1,"message":"157","line":3,"column":35,"nodeType":"154","messageId":"155","endLine":3,"endColumn":40},{"ruleId":"162","severity":1,"message":"163","line":28,"column":43,"nodeType":"164","messageId":"165","endLine":28,"endColumn":45},{"ruleId":"162","severity":1,"message":"163","line":31,"column":48,"nodeType":"164","messageId":"165","endLine":31,"endColumn":50},{"ruleId":"152","severity":1,"message":"156","line":3,"column":27,"nodeType":"154","messageId":"155","endLine":3,"endColumn":33},{"ruleId":"152","severity":1,"message":"157","line":3,"column":35,"nodeType":"154","messageId":"155","endLine":3,"endColumn":40},{"ruleId":"162","severity":1,"message":"163","line":43,"column":39,"nodeType":"164","messageId":"165","endLine":43,"endColumn":41},{"ruleId":"162","severity":1,"message":"163","line":46,"column":44,"nodeType":"164","messageId":"165","endLine":46,"endColumn":46},{"ruleId":"152","severity":1,"message":"156","line":3,"column":27,"nodeType":"154","messageId":"155","endLine":3,"endColumn":33},{"ruleId":"152","severity":1,"message":"157","line":3,"column":35,"nodeType":"154","messageId":"155","endLine":3,"endColumn":40},{"ruleId":"152","severity":1,"message":"153","line":3,"column":42,"nodeType":"154","messageId":"155","endLine":3,"endColumn":46},{"ruleId":"152","severity":1,"message":"156","line":3,"column":27,"nodeType":"154","messageId":"155","endLine":3,"endColumn":33},{"ruleId":"152","severity":1,"message":"157","line":3,"column":35,"nodeType":"154","messageId":"155","endLine":3,"endColumn":40},{"ruleId":"152","severity":1,"message":"153","line":3,"column":42,"nodeType":"154","messageId":"155","endLine":3,"endColumn":46},{"ruleId":"152","severity":1,"message":"168","line":4,"column":13,"nodeType":"154","messageId":"155","endLine":4,"endColumn":14},{"ruleId":"152","severity":1,"message":"169","line":14,"column":31,"nodeType":"154","messageId":"155","endLine":14,"endColumn":51},{"ruleId":"162","severity":1,"message":"167","line":55,"column":23,"nodeType":"164","messageId":"165","endLine":55,"endColumn":25},{"ruleId":"162","severity":1,"message":"167","line":55,"column":46,"nodeType":"164","messageId":"165","endLine":55,"endColumn":48},{"ruleId":"152","severity":1,"message":"156","line":3,"column":27,"nodeType":"154","messageId":"155","endLine":3,"endColumn":33},{"ruleId":"152","severity":1,"message":"157","line":3,"column":35,"nodeType":"154","messageId":"155","endLine":3,"endColumn":40},{"ruleId":"152","severity":1,"message":"153","line":3,"column":42,"nodeType":"154","messageId":"155","endLine":3,"endColumn":46},{"ruleId":"152","severity":1,"message":"170","line":3,"column":48,"nodeType":"154","messageId":"155","endLine":3,"endColumn":58},{"ruleId":"152","severity":1,"message":"168","line":4,"column":13,"nodeType":"154","messageId":"155","endLine":4,"endColumn":14},{"ruleId":"152","severity":1,"message":"171","line":11,"column":8,"nodeType":"154","messageId":"155","endLine":11,"endColumn":17},{"ruleId":"152","severity":1,"message":"172","line":12,"column":8,"nodeType":"154","messageId":"155","endLine":12,"endColumn":12},{"ruleId":"152","severity":1,"message":"173","line":13,"column":8,"nodeType":"154","messageId":"155","endLine":13,"endColumn":16},{"ruleId":"152","severity":1,"message":"174","line":14,"column":8,"nodeType":"154","messageId":"155","endLine":14,"endColumn":15},{"ruleId":"152","severity":1,"message":"175","line":15,"column":8,"nodeType":"154","messageId":"155","endLine":15,"endColumn":20},{"ruleId":"152","severity":1,"message":"176","line":16,"column":8,"nodeType":"154","messageId":"155","endLine":16,"endColumn":18},{"ruleId":"152","severity":1,"message":"177","line":17,"column":8,"nodeType":"154","messageId":"155","endLine":17,"endColumn":22},{"ruleId":"152","severity":1,"message":"178","line":19,"column":8,"nodeType":"154","messageId":"155","endLine":19,"endColumn":18},{"ruleId":"162","severity":1,"message":"167","line":53,"column":24,"nodeType":"164","messageId":"165","endLine":53,"endColumn":26},{"ruleId":"162","severity":1,"message":"167","line":53,"column":47,"nodeType":"164","messageId":"165","endLine":53,"endColumn":49},{"ruleId":"148","replacedBy":"179"},{"ruleId":"150","replacedBy":"180"},{"ruleId":"152","severity":1,"message":"156","line":3,"column":27,"nodeType":"154","messageId":"155","endLine":3,"endColumn":33},{"ruleId":"152","severity":1,"message":"157","line":3,"column":35,"nodeType":"154","messageId":"155","endLine":3,"endColumn":40},{"ruleId":"152","severity":1,"message":"153","line":3,"column":42,"nodeType":"154","messageId":"155","endLine":3,"endColumn":46},{"ruleId":"152","severity":1,"message":"168","line":4,"column":13,"nodeType":"154","messageId":"155","endLine":4,"endColumn":14},{"ruleId":"152","severity":1,"message":"181","line":5,"column":8,"nodeType":"154","messageId":"155","endLine":5,"endColumn":12},{"ruleId":"152","severity":1,"message":"171","line":6,"column":8,"nodeType":"154","messageId":"155","endLine":6,"endColumn":17},{"ruleId":"152","severity":1,"message":"175","line":7,"column":8,"nodeType":"154","messageId":"155","endLine":7,"endColumn":20},{"ruleId":"152","severity":1,"message":"182","line":1,"column":17,"nodeType":"154","messageId":"155","endLine":1,"endColumn":26},{"ruleId":"152","severity":1,"message":"156","line":3,"column":27,"nodeType":"154","messageId":"155","endLine":3,"endColumn":33},{"ruleId":"152","severity":1,"message":"157","line":3,"column":35,"nodeType":"154","messageId":"155","endLine":3,"endColumn":40},{"ruleId":"152","severity":1,"message":"153","line":3,"column":42,"nodeType":"154","messageId":"155","endLine":3,"endColumn":46},{"ruleId":"152","severity":1,"message":"171","line":11,"column":8,"nodeType":"154","messageId":"155","endLine":11,"endColumn":17},{"ruleId":"152","severity":1,"message":"172","line":12,"column":8,"nodeType":"154","messageId":"155","endLine":12,"endColumn":12},{"ruleId":"152","severity":1,"message":"173","line":13,"column":8,"nodeType":"154","messageId":"155","endLine":13,"endColumn":16},{"ruleId":"152","severity":1,"message":"174","line":14,"column":8,"nodeType":"154","messageId":"155","endLine":14,"endColumn":15},{"ruleId":"152","severity":1,"message":"175","line":15,"column":8,"nodeType":"154","messageId":"155","endLine":15,"endColumn":20},{"ruleId":"152","severity":1,"message":"176","line":16,"column":8,"nodeType":"154","messageId":"155","endLine":16,"endColumn":18},{"ruleId":"152","severity":1,"message":"177","line":17,"column":8,"nodeType":"154","messageId":"155","endLine":17,"endColumn":22},{"ruleId":"152","severity":1,"message":"178","line":20,"column":8,"nodeType":"154","messageId":"155","endLine":20,"endColumn":18},{"ruleId":"162","severity":1,"message":"167","line":89,"column":24,"nodeType":"164","messageId":"165","endLine":89,"endColumn":26},{"ruleId":"162","severity":1,"message":"167","line":89,"column":47,"nodeType":"164","messageId":"165","endLine":89,"endColumn":49},"no-native-reassign",["183"],"no-negated-in-lhs",["184"],"no-unused-vars","'Link' is defined but never used.","Identifier","unusedVar","'Router' is defined but never used.","'Route' is defined but never used.","no-useless-constructor","Useless constructor.","MethodDefinition","noUselessConstructor","eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","'axios' is defined but never used.","Expected '!==' and instead saw '!='.","'M' is defined but never used.","'setUpdated_Education' is assigned a value but never used.","'useHistory' is defined but never used.","'TextField' is defined but never used.","'List' is defined but never used.","'ListItem' is defined but never used.","'Divider' is defined but never used.","'Autocomplete' is defined but never used.","'IconButton' is defined but never used.","'InputAdornment' is defined but never used.","'SearchIcon' is defined but never used.",["183"],["184"],"'Grid' is defined but never used.","'useEffect' is defined but never used.","no-global-assign","no-unsafe-negation"]